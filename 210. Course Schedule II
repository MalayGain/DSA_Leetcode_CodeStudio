vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        
        vector<int> adj[numCourses];
        for(auto p:prerequisites)
        {
            adj[p[1]].push_back(p[0]);
            
        }
        
        vector<int> ordering;
        vector<int> vist(numCourses,0);
    
        for(int i=0;i<numCourses;i++)
        {
            vector<int> dfsVis(numCourses,0);
            
           if(!vist[i])
               if(detectCycle(i,adj,vist,dfsVis))return ordering;
        }
        
        vector<int> vis(numCourses,0);
        stack<int> order;
        
        for(int i=0;i<numCourses;i++)
        {
             
           if(!vis[i])topoDFS(i,vis,order,adj);
              
        }
        
        int k=1;
        
        
        
        while(k<=numCourses)
        {
            ordering.push_back(order.top());
            
            order.pop();
            k++;
        }
        
        return ordering;
        
    }
    
    bool detectCycle(int start,vector<int> adj[],vector<int> &vis,vector<int> dfsVis)
    {
        vis[start]=1;
        dfsVis[start]=1;
        
        bool ans=false;
            
        for(auto n:adj[start])
        {
            if(!vis[n])
            {
                ans=ans || detectCycle(n,adj,vis,dfsVis);
            }
            else if(vis[n] && dfsVis[n])
            {
                return true;
            }
        }
        
        dfsVis[start]=0;
        
        return ans;
    }
    
    void topoDFS(int start,vector<int> &vis,stack<int> &order,vector<int> adj[])
    {
        vis[start]=1;
        
        for(auto n:adj[start])
        {
            if(!vis[n])topoDFS(n,vis,order,adj);
                
        }
        
        order.push(start);
    }
    
    
    
    
    
    
    
    
    //*************************more optimized********************
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        
        vector<int> graph[numCourses];
        
        for(int i=0;i<prerequisites.size();i++)
        {
            graph[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        
        vector<int> vis(numCourses,0);
        vector<int> dfsVis(numCourses,0);
        
        stack<int> st;
        
        for(int i=0;i<numCourses;i++)
        {
            if(!vis[i])
            {
                if(!dfsTopo(i,vis,dfsVis,st,graph))
                {
                    return {};
                }
            }
        }
        
        vector<int> v;
        
        for(int i=0;i<numCourses;i++)
        {
            v.push_back(st.top());
            st.pop();
        }
        
        return v;
        
    }
    
    bool dfsTopo(int src,vector<int> &vis,vector<int> &dfsVis,stack<int> &st, vector<int> graph[])
    {
        vis[src]=1;
        dfsVis[src]=1;
        
        for(auto child:graph[src])
        {
            if(!vis[child])
            {
                if(!dfsTopo(child,vis,dfsVis,st,graph))
                {
                    return false;                    
                }
            }
            else if(vis[child] && dfsVis[child])
            {
                return false;                  // if cycle found ....impossible
            }
        }
        
        dfsVis[src]=0;
        st.push(src); // bfs ended for src
        
        return true;
    }
